use super::{
    instructions::*,
    memory::InstructionData,
    registers::{R16Mem, R16, R8},
};

/// Maps the opcode to a Instruction to execute and returns a tuple consisting of the instruction
/// and the number of bytes used for the instruction.
#[rustfmt::skip]
pub(crate) fn get_instruction(data: &InstructionData) -> (Instruction, u16) {
    let InstructionData { opcode, param1, param2 } = data;

    // unnecessary computation 95% of the time, maybe pass two u8s instead and provide
    // helper function for computation?
    let a16 = (*param1 as u16) << 8 | (*param2 as u16);

    match opcode {
        0x06 => (Instruction::Ld(LD::LoadToR8(R8::B, ByteTarget::Constant(*param1))), 2),
        0x0E => (Instruction::Ld(LD::LoadToR8(R8::C, ByteTarget::Constant(*param1))), 2),
        0x16 => (Instruction::Ld(LD::LoadToR8(R8::D, ByteTarget::Constant(*param1))), 2),
        0x1E => (Instruction::Ld(LD::LoadToR8(R8::E, ByteTarget::Constant(*param1))), 2),
        0x26 => (Instruction::Ld(LD::LoadToR8(R8::H, ByteTarget::Constant(*param1))), 2),
        0x2E => (Instruction::Ld(LD::LoadToR8(R8::L, ByteTarget::Constant(*param1))), 2),
        0x3E => (Instruction::Ld(LD::LoadToR8(R8::A, ByteTarget::Constant(*param1))), 2),
        0x36 => (Instruction::Ld(LD::StoreHLConstant(*param1)), 2),
        0x40 => (Instruction::Ld(LD::LoadToR8(R8::B, ByteTarget::Register8(R8::B))), 1),
        0x41 => (Instruction::Ld(LD::LoadToR8(R8::B, ByteTarget::Register8(R8::C))), 1),
        0x42 => (Instruction::Ld(LD::LoadToR8(R8::B, ByteTarget::Register8(R8::D))), 1),
        0x43 => (Instruction::Ld(LD::LoadToR8(R8::B, ByteTarget::Register8(R8::E))), 1),
        0x44 => (Instruction::Ld(LD::LoadToR8(R8::B, ByteTarget::Register8(R8::H))), 1),
        0x45 => (Instruction::Ld(LD::LoadToR8(R8::B, ByteTarget::Register8(R8::L))), 1),
        0x46 => (Instruction::Ld(LD::LoadToR8(R8::B, ByteTarget::HLAddress)), 1),
        0x47 => (Instruction::Ld(LD::LoadToR8(R8::B, ByteTarget::Register8(R8::A))), 1),
        0x48 => (Instruction::Ld(LD::LoadToR8(R8::C, ByteTarget::Register8(R8::B))), 1),
        0x49 => (Instruction::Ld(LD::LoadToR8(R8::C, ByteTarget::Register8(R8::C))), 1),
        0x4A => (Instruction::Ld(LD::LoadToR8(R8::C, ByteTarget::Register8(R8::D))), 1),
        0x4B => (Instruction::Ld(LD::LoadToR8(R8::C, ByteTarget::Register8(R8::E))), 1),
        0x4C => (Instruction::Ld(LD::LoadToR8(R8::C, ByteTarget::Register8(R8::H))), 1),
        0x4D => (Instruction::Ld(LD::LoadToR8(R8::C, ByteTarget::Register8(R8::L))), 1),
        0x4E => (Instruction::Ld(LD::LoadToR8(R8::C, ByteTarget::HLAddress)), 1),
        0x4F => (Instruction::Ld(LD::LoadToR8(R8::C, ByteTarget::Register8(R8::A))), 1),
        0x50 => (Instruction::Ld(LD::LoadToR8(R8::D, ByteTarget::Register8(R8::B))), 1),
        0x51 => (Instruction::Ld(LD::LoadToR8(R8::D, ByteTarget::Register8(R8::C))), 1),
        0x52 => (Instruction::Ld(LD::LoadToR8(R8::D, ByteTarget::Register8(R8::D))), 1),
        0x53 => (Instruction::Ld(LD::LoadToR8(R8::D, ByteTarget::Register8(R8::E))), 1),
        0x54 => (Instruction::Ld(LD::LoadToR8(R8::D, ByteTarget::Register8(R8::H))), 1),
        0x55 => (Instruction::Ld(LD::LoadToR8(R8::D, ByteTarget::Register8(R8::L))), 1),
        0x56 => (Instruction::Ld(LD::LoadToR8(R8::D, ByteTarget::HLAddress)), 1),
        0x57 => (Instruction::Ld(LD::LoadToR8(R8::D, ByteTarget::Register8(R8::A))), 1),
        0x58 => (Instruction::Ld(LD::LoadToR8(R8::E, ByteTarget::Register8(R8::B))), 1),
        0x59 => (Instruction::Ld(LD::LoadToR8(R8::E, ByteTarget::Register8(R8::C))), 1),
        0x5A => (Instruction::Ld(LD::LoadToR8(R8::E, ByteTarget::Register8(R8::D))), 1),
        0x5B => (Instruction::Ld(LD::LoadToR8(R8::E, ByteTarget::Register8(R8::E))), 1),
        0x5C => (Instruction::Ld(LD::LoadToR8(R8::E, ByteTarget::Register8(R8::H))), 1),
        0x5D => (Instruction::Ld(LD::LoadToR8(R8::E, ByteTarget::Register8(R8::L))), 1),
        0x5E => (Instruction::Ld(LD::LoadToR8(R8::E, ByteTarget::HLAddress)), 1),
        0x5F => (Instruction::Ld(LD::LoadToR8(R8::E, ByteTarget::Register8(R8::A))), 1),
        0x60 => (Instruction::Ld(LD::LoadToR8(R8::H, ByteTarget::Register8(R8::B))), 1),
        0x61 => (Instruction::Ld(LD::LoadToR8(R8::H, ByteTarget::Register8(R8::C))), 1),
        0x62 => (Instruction::Ld(LD::LoadToR8(R8::H, ByteTarget::Register8(R8::D))), 1),
        0x63 => (Instruction::Ld(LD::LoadToR8(R8::H, ByteTarget::Register8(R8::E))), 1),
        0x64 => (Instruction::Ld(LD::LoadToR8(R8::H, ByteTarget::Register8(R8::H))), 1),
        0x65 => (Instruction::Ld(LD::LoadToR8(R8::H, ByteTarget::Register8(R8::L))), 1),
        0x66 => (Instruction::Ld(LD::LoadToR8(R8::H, ByteTarget::HLAddress)), 1),
        0x67 => (Instruction::Ld(LD::LoadToR8(R8::H, ByteTarget::Register8(R8::A))), 1),
        0x68 => (Instruction::Ld(LD::LoadToR8(R8::L, ByteTarget::Register8(R8::B))), 1),
        0x69 => (Instruction::Ld(LD::LoadToR8(R8::L, ByteTarget::Register8(R8::C))), 1),
        0x6A => (Instruction::Ld(LD::LoadToR8(R8::L, ByteTarget::Register8(R8::D))), 1),
        0x6B => (Instruction::Ld(LD::LoadToR8(R8::L, ByteTarget::Register8(R8::E))), 1),
        0x6C => (Instruction::Ld(LD::LoadToR8(R8::L, ByteTarget::Register8(R8::H))), 1),
        0x6D => (Instruction::Ld(LD::LoadToR8(R8::L, ByteTarget::Register8(R8::L))), 1),
        0x6E => (Instruction::Ld(LD::LoadToR8(R8::L, ByteTarget::HLAddress)), 1),
        0x6F => (Instruction::Ld(LD::LoadToR8(R8::L, ByteTarget::Register8(R8::A))), 1),
        0x70 => (Instruction::Ld(LD::StoreHLRegister(R8::B)), 1),
        0x71 => (Instruction::Ld(LD::StoreHLRegister(R8::C)), 1),
        0x72 => (Instruction::Ld(LD::StoreHLRegister(R8::D)), 1),
        0x73 => (Instruction::Ld(LD::StoreHLRegister(R8::E)), 1),
        0x74 => (Instruction::Ld(LD::StoreHLRegister(R8::H)), 1),
        0x75 => (Instruction::Ld(LD::StoreHLRegister(R8::L)), 1),
        0x77 => (Instruction::Ld(LD::StoreHLRegister(R8::A)), 1),
        0x78 => (Instruction::Ld(LD::LoadToR8(R8::A, ByteTarget::Register8(R8::B))), 1),
        0x79 => (Instruction::Ld(LD::LoadToR8(R8::A, ByteTarget::Register8(R8::C))), 1),
        0x7A => (Instruction::Ld(LD::LoadToR8(R8::A, ByteTarget::Register8(R8::D))), 1),
        0x7B => (Instruction::Ld(LD::LoadToR8(R8::A, ByteTarget::Register8(R8::E))), 1),
        0x7C => (Instruction::Ld(LD::LoadToR8(R8::A, ByteTarget::Register8(R8::H))), 1),
        0x7D => (Instruction::Ld(LD::LoadToR8(R8::A, ByteTarget::Register8(R8::L))), 1),
        0x7E => (Instruction::Ld(LD::LoadToR8(R8::A, ByteTarget::HLAddress)), 1),
        0x7F => (Instruction::Ld(LD::LoadToR8(R8::A, ByteTarget::Register8(R8::A))), 1),
        0x02 => (Instruction::Ld(LD::StoreA(R16Mem::BC)), 1),
        0x12 => (Instruction::Ld(LD::StoreA(R16Mem::DE)), 1),
        0x22 => (Instruction::Ld(LD::StoreA(R16Mem::HLI)), 1),
        0x32 => (Instruction::Ld(LD::StoreA(R16Mem::HLD)), 1),
        0x0A => (Instruction::Ld(LD::LoadToA(R16Mem::BC)), 1),
        0x1A => (Instruction::Ld(LD::LoadToA(R16Mem::DE)), 1),
        0x2A => (Instruction::Ld(LD::LoadToA(R16Mem::HLI)), 1),
        0x3A => (Instruction::Ld(LD::LoadToA(R16Mem::HLD)), 1),
        0x01 => (Instruction::Ld(LD::LoadToR16(R16::BC, a16)), 3),
        0x11 => (Instruction::Ld(LD::LoadToR16(R16::DE, a16)), 3),
        0x21 => (Instruction::Ld(LD::LoadToR16(R16::HL, a16)), 3),
        0x31 => (Instruction::Ld(LD::LoadToSP(a16)), 3),
        0x08 => (Instruction::Ld(LD::StoreSP(a16)), 3),
        0xF8 => (Instruction::Ld(LD::LoadSPToHL((*param1) as i8)), 2),
        0xF9 => (Instruction::Ld(LD::LoadHLToSP), 1),
        0xEA => (Instruction::Ld(LD::StoreADirectly(a16)), 3),
        0xFA => (Instruction::Ld(LD::LoadToADirectly(a16)), 3),
        0xE0 => (Instruction::Ldh(LDH::StoreConstant(*param1)), 2),
        0xF0 => (Instruction::Ldh(LDH::LoadConstant(*param1)), 2),
        0xE2 => (Instruction::Ldh(LDH::StoreOffset), 1),
        0xF2 => (Instruction::Ldh(LDH::LoadOffset), 1),
        _ => (Instruction::Invalid(*opcode), 1),
    }
}
